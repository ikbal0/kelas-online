import {getCsrfToken} from 'next-auth/react'
import {getSession} from 'next-auth/react'
import styles from "../../styles/Home.module.css"
import Head from 'next/head'
import img from '../../public/assets/pic/bg/bgIndex.png'
import Image from 'next/image'

export default function SignIn({csrfToken}){
    return(
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <div className='container'>
                <div className='row'>
                    <div className='col-sm-12 col-md-2'>
                        <form style={{marginLeft: 'auto', marginRight: 'auto'}} method='POST' action='/api/auth/callback/credentials'>
                            <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
                            <div className='row mb-3'>
                                <input className='form-control' name="email" type="text" placeholder="{email}" />
                            </div>
                            <div className='row mb-3'>
                                <input name="password" className='form-control' type="password" placeholder="password" />
                            </div>
                            <div className='row'>
                                <button className='btn btn-secondary' type="submit">Sign in</button>
                            </div>
                        </form>
                    </div>
                    <div className='col-sm-12 col-md-10'>
                    <Image src={img} placeholder='blur' alt='pic'/>
                    </div>
                </div>
                </div>
            </main>
        </div>
    )
}

export async function getServerSideProps(context) {
    const session = await getSession(context)

    if (session){
        return {
            redirect: {
                permanent: false,
                destination: "/"
            }
        }
    }
    return {
        props: {
            csrfToken: await getCsrfToken(context),
        },
    }
}